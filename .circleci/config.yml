version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-eks: circleci/aws-eks@2.1.1
  kubernetes: circleci/kubernetes@0.4.0
  slack: circleci/slack@4.4.2 # ref: https://github.com/CircleCI-Public/slack-orb, https://circleci.com/developer/orbs/orb/circleci/slack#usage-examples

jobs:
  lint-and-test-job:
    docker:
      - image: circleci/node:14.15.0
        environment:
          TEST_DB_NAME: circle_test
          TEST_DB_PORT: '5432'
          TEST_DB_USER: postgres
          TEST_DB_HOST: localhost
          TEST_DB_PASSWORD: test
      - image: circleci/postgres:12.5
        environment:
          POSTGRES_PASSWORD: test

    steps:
      - checkout
      - restore_cache: # ref: https://circleci.com/docs/2.0/caching/#restoring-cache
          keys: 
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}

      - run: npm ci

      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run: npm run lint

      - run:
          name: Jest Tests
          command: npm run test

  build-and-push-image:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:dev-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            docker push << parameters.reg >>/<< parameters.repo >>:dev-latest
          name: Update container image
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1

  build-and-push-image-test:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:test-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            docker push << parameters.reg >>/<< parameters.repo >>:test-latest
          name: Update container image
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1

  build-and-push-image-sandbox:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:sandbox-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_TAG}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_TAG}"
            docker push << parameters.reg >>/<< parameters.repo >>:sandbox-latest
          name: Update container image
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1

  deploy-image:
    docker: # Referencing the python image here, see https://github.com/CircleCI-Public/aws-eks-orb/issues/52#issuecomment-1006838213
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        type: string
        default: "dev-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
      deployment-unum:
        type: string

    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Update container image
          command: |
            # Deploy the original demo issuer app
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_PREVIOUS_BUILD_NUM}"
            
            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
      - run:
          name: Update unum container image
          command: |
            # Deploy the acme unum wallet demo issuer app
            kubectl set image deployment/<< parameters.deployment-unum >> << parameters.deployment-unum >>=${AWS_ECR_URL}/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_PREVIOUS_BUILD_NUM}"
            
            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment-unum >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
          # custom: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "fields": [
          #           {
          #             "type": "plain_text",
          #             "text": "Dev deployment of the demo-issuer-server failed.",
          #             "emoji": true
          #           }
          #         ]
          #       }
          #     ]
          #   }
      - slack/notify:
          event: pass
          # template: success_tagged_deploy_1
          template: basic_success_1
          # custom: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "fields": [
          #           {
          #             "type": "plain_text",
          #             "text": "Dev deployment of the demo-issuer-server succeeded.",
          #             "emoji": true
          #           }
          #         ]
          #       }
          #     ]
          #   }

  deploy-image-sandbox:
    docker: # Referencing the python image here, see https://github.com/CircleCI-Public/aws-eks-orb/issues/52#issuecomment-1006838213
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        type: string
        default: "sandbox-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
      deployment-unum:
        type: string
      namespace:
        type: string
        default: "demos"

    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Update container image
          command: |
            # Deploy the original demo issuer app
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:"${CIRCLE_TAG}" -n << parameters.namespace >>

            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >> -n << parameters.namespace >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
      - run:
          name: Update unum container image
          command: |
            # Deploy the acme unum wallet demo issuer app
            kubectl set image deployment/<< parameters.deployment-unum >> << parameters.deployment-unum >>=${AWS_ECR_URL}/<< parameters.repo >>:"${CIRCLE_TAG}" -n << parameters.namespace >>

            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment-unum >> -n << parameters.namespace >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
          # custom: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "fields": [
          #           {
          #             "type": "plain_text",
          #             "text": "Sandbox deployment of the demo-issuer-server failed.",
          #             "emoji": true
          #           }
          #         ]
          #       }
          #     ]
          #   }
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          # custom: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "fields": [
          #           {
          #             "type": "plain_text",
          #             "text": "Sandbox deployment of the demo-issuer-server succeeded.",
          #             "emoji": true
          #           }
          #         ]
          #       }
          #     ]
          #   }

workflows:
  build-and-deploy-release:
    jobs:
      - lint-and-test-job:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-and-push-image-sandbox:
          requires:
            - lint-and-test-job
          context: 
            - AWS-Dev
            - Slack-Context
          repo: demo-issuer-server
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-image-sandbox:
          requires:
            - build-and-push-image-sandbox
          context: 
            - AWS-Dev
            - Slack-Context
          repo: demo-issuer-server
          deployment: demo-issuer-server
          deployment-unum: demo-unum-issuer-server
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  lint-and-test:
    jobs:
      - lint-and-test-job:
          filters:
            branches:
              ignore:
                - main
                - test-circleci
                - sandbox
  build-and-deploy:
    jobs:
      - lint-and-test-job:
          filters:
            branches:
              only:
                - main

      - build-and-push-image:
          requires:
            - lint-and-test-job
          context: 
            - AWS-Dev
            - Slack-Context
          repo: demo-issuer-server
          filters:
            branches:
              only:
                - main

      - deploy-image:
          requires:
            - build-and-push-image
          context: 
            - AWS-Dev
            - Slack-Context
          repo: demo-issuer-server
          deployment: demo-issuer-server
          deployment-unum: demo-unum-issuer-server
          filters:
            branches:
              only:
                - main

  build-and-deploy-test:
    jobs:
      - lint-and-test-job:
          filters:
            branches:
              only:
                - test-circleci

      - build-and-push-image-test:
          requires:
            - lint-and-test-job
          context: 
            - AWS-Dev
            - Slack-Context
          repo: demo-issuer-server
          filters:
            branches:
              only:
                - test-circleci

      - deploy-image:
          requires:
            - build-and-push-image-test
          context: 
            - AWS-Dev
            - Slack-Context
          repo: demo-issuer-server
          deployment: demo-issuer-server
          deployment-unum: demo-unum-issuer-server
          filters:
            branches:
              only:
                - test-circleci